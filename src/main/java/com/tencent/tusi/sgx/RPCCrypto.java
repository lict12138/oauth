/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tencent.tusi.sgx;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-15")
public class RPCCrypto {

  public interface Iface {

    public java.util.List<java.util.Map<String,KeyInfo>> getKeysInfo() throws org.apache.thrift.TException;

    public String Sign(String message, String privateKey) throws org.apache.thrift.TException;

    public boolean Verify(String message, String sig, String publicKey) throws org.apache.thrift.TException;

    public boolean Verifyex(String message, String sig, String pub, boolean isSM) throws org.apache.thrift.TException;

    public String encryptData(String masterKey, byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException;

    public String decryptData(String masterKey, byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException;

    public String encrypt(byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException;

    public String decrypt(byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException;

    public SEKey requestSEKey(String masterKey, String hid, String pubKey) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getKeysInfo(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String, KeyInfo>>> resultHandler) throws org.apache.thrift.TException;

    public void Sign(String message, String privateKey, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void Verify(String message, String sig, String publicKey, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Verifyex(String message, String sig, String pub, boolean isSM, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void encryptData(String masterKey, byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void decryptData(String masterKey, byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void encrypt(byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void decrypt(byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void requestSEKey(String masterKey, String hid, String pubKey, org.apache.thrift.async.AsyncMethodCallback<SEKey> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<java.util.Map<String,KeyInfo>> getKeysInfo() throws org.apache.thrift.TException
    {
      send_getKeysInfo();
      return recv_getKeysInfo();
    }

    public void send_getKeysInfo() throws org.apache.thrift.TException
    {
      getKeysInfo_args args = new getKeysInfo_args();
      sendBase("getKeysInfo", args);
    }

    public java.util.List<java.util.Map<String,KeyInfo>> recv_getKeysInfo() throws org.apache.thrift.TException
    {
      getKeysInfo_result result = new getKeysInfo_result();
      receiveBase(result, "getKeysInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKeysInfo failed: unknown result");
    }

    public String Sign(String message, String privateKey) throws org.apache.thrift.TException
    {
      send_Sign(message, privateKey);
      return recv_Sign();
    }

    public void send_Sign(String message, String privateKey) throws org.apache.thrift.TException
    {
      Sign_args args = new Sign_args();
      args.setMessage(message);
      args.setPrivateKey(privateKey);
      sendBase("Sign", args);
    }

    public String recv_Sign() throws org.apache.thrift.TException
    {
      Sign_result result = new Sign_result();
      receiveBase(result, "Sign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Sign failed: unknown result");
    }

    public boolean Verify(String message, String sig, String publicKey) throws org.apache.thrift.TException
    {
      send_Verify(message, sig, publicKey);
      return recv_Verify();
    }

    public void send_Verify(String message, String sig, String publicKey) throws org.apache.thrift.TException
    {
      Verify_args args = new Verify_args();
      args.setMessage(message);
      args.setSig(sig);
      args.setPublicKey(publicKey);
      sendBase("Verify", args);
    }

    public boolean recv_Verify() throws org.apache.thrift.TException
    {
      Verify_result result = new Verify_result();
      receiveBase(result, "Verify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Verify failed: unknown result");
    }

    public boolean Verifyex(String message, String sig, String pub, boolean isSM) throws org.apache.thrift.TException
    {
      send_Verifyex(message, sig, pub, isSM);
      return recv_Verifyex();
    }

    public void send_Verifyex(String message, String sig, String pub, boolean isSM) throws org.apache.thrift.TException
    {
      Verifyex_args args = new Verifyex_args();
      args.setMessage(message);
      args.setSig(sig);
      args.setPub(pub);
      args.setIsSM(isSM);
      sendBase("Verifyex", args);
    }

    public boolean recv_Verifyex() throws org.apache.thrift.TException
    {
      Verifyex_result result = new Verifyex_result();
      receiveBase(result, "Verifyex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Verifyex failed: unknown result");
    }

    public String encryptData(String masterKey, byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException
    {
      send_encryptData(masterKey, type, data, downSeed, macSeed);
      return recv_encryptData();
    }

    public void send_encryptData(String masterKey, byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException
    {
      encryptData_args args = new encryptData_args();
      args.setMasterKey(masterKey);
      args.setType(type);
      args.setData(data);
      args.setDownSeed(downSeed);
      args.setMacSeed(macSeed);
      sendBase("encryptData", args);
    }

    public String recv_encryptData() throws org.apache.thrift.TException
    {
      encryptData_result result = new encryptData_result();
      receiveBase(result, "encryptData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "encryptData failed: unknown result");
    }

    public String decryptData(String masterKey, byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException
    {
      send_decryptData(masterKey, type, data, upSeed, macSeed);
      return recv_decryptData();
    }

    public void send_decryptData(String masterKey, byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException
    {
      decryptData_args args = new decryptData_args();
      args.setMasterKey(masterKey);
      args.setType(type);
      args.setData(data);
      args.setUpSeed(upSeed);
      args.setMacSeed(macSeed);
      sendBase("decryptData", args);
    }

    public String recv_decryptData() throws org.apache.thrift.TException
    {
      decryptData_result result = new decryptData_result();
      receiveBase(result, "decryptData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "decryptData failed: unknown result");
    }

    public String encrypt(byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException
    {
      send_encrypt(type, data, downSeed, macSeed);
      return recv_encrypt();
    }

    public void send_encrypt(byte type, String data, String downSeed, String macSeed) throws org.apache.thrift.TException
    {
      encrypt_args args = new encrypt_args();
      args.setType(type);
      args.setData(data);
      args.setDownSeed(downSeed);
      args.setMacSeed(macSeed);
      sendBase("encrypt", args);
    }

    public String recv_encrypt() throws org.apache.thrift.TException
    {
      encrypt_result result = new encrypt_result();
      receiveBase(result, "encrypt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "encrypt failed: unknown result");
    }

    public String decrypt(byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException
    {
      send_decrypt(type, data, upSeed, macSeed);
      return recv_decrypt();
    }

    public void send_decrypt(byte type, String data, String upSeed, String macSeed) throws org.apache.thrift.TException
    {
      decrypt_args args = new decrypt_args();
      args.setType(type);
      args.setData(data);
      args.setUpSeed(upSeed);
      args.setMacSeed(macSeed);
      sendBase("decrypt", args);
    }

    public String recv_decrypt() throws org.apache.thrift.TException
    {
      decrypt_result result = new decrypt_result();
      receiveBase(result, "decrypt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "decrypt failed: unknown result");
    }

    public SEKey requestSEKey(String masterKey, String hid, String pubKey) throws org.apache.thrift.TException
    {
      send_requestSEKey(masterKey, hid, pubKey);
      return recv_requestSEKey();
    }

    public void send_requestSEKey(String masterKey, String hid, String pubKey) throws org.apache.thrift.TException
    {
      requestSEKey_args args = new requestSEKey_args();
      args.setMasterKey(masterKey);
      args.setHid(hid);
      args.setPubKey(pubKey);
      sendBase("requestSEKey", args);
    }

    public SEKey recv_requestSEKey() throws org.apache.thrift.TException
    {
      requestSEKey_result result = new requestSEKey_result();
      receiveBase(result, "requestSEKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestSEKey failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getKeysInfo(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String,KeyInfo>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKeysInfo_call method_call = new getKeysInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKeysInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.Map<String,KeyInfo>>> {
      public getKeysInfo_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String,KeyInfo>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKeysInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKeysInfo_args args = new getKeysInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.Map<String,KeyInfo>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKeysInfo();
      }
    }

    public void Sign(String message, String privateKey, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Sign_call method_call = new Sign_call(message, privateKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Sign_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String message;
      private String privateKey;
      public Sign_call(String message, String privateKey, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.privateKey = privateKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Sign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Sign_args args = new Sign_args();
        args.setMessage(message);
        args.setPrivateKey(privateKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Sign();
      }
    }

    public void Verify(String message, String sig, String publicKey, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Verify_call method_call = new Verify_call(message, sig, publicKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Verify_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String message;
      private String sig;
      private String publicKey;
      public Verify_call(String message, String sig, String publicKey, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.sig = sig;
        this.publicKey = publicKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Verify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Verify_args args = new Verify_args();
        args.setMessage(message);
        args.setSig(sig);
        args.setPublicKey(publicKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Verify();
      }
    }

    public void Verifyex(String message, String sig, String pub, boolean isSM, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Verifyex_call method_call = new Verifyex_call(message, sig, pub, isSM, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Verifyex_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String message;
      private String sig;
      private String pub;
      private boolean isSM;
      public Verifyex_call(String message, String sig, String pub, boolean isSM, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.sig = sig;
        this.pub = pub;
        this.isSM = isSM;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Verifyex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Verifyex_args args = new Verifyex_args();
        args.setMessage(message);
        args.setSig(sig);
        args.setPub(pub);
        args.setIsSM(isSM);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Verifyex();
      }
    }

    public void encryptData(String masterKey, byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      encryptData_call method_call = new encryptData_call(masterKey, type, data, downSeed, macSeed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class encryptData_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String masterKey;
      private byte type;
      private String data;
      private String downSeed;
      private String macSeed;
      public encryptData_call(String masterKey, byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterKey = masterKey;
        this.type = type;
        this.data = data;
        this.downSeed = downSeed;
        this.macSeed = macSeed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("encryptData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        encryptData_args args = new encryptData_args();
        args.setMasterKey(masterKey);
        args.setType(type);
        args.setData(data);
        args.setDownSeed(downSeed);
        args.setMacSeed(macSeed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_encryptData();
      }
    }

    public void decryptData(String masterKey, byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      decryptData_call method_call = new decryptData_call(masterKey, type, data, upSeed, macSeed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class decryptData_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String masterKey;
      private byte type;
      private String data;
      private String upSeed;
      private String macSeed;
      public decryptData_call(String masterKey, byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterKey = masterKey;
        this.type = type;
        this.data = data;
        this.upSeed = upSeed;
        this.macSeed = macSeed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("decryptData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        decryptData_args args = new decryptData_args();
        args.setMasterKey(masterKey);
        args.setType(type);
        args.setData(data);
        args.setUpSeed(upSeed);
        args.setMacSeed(macSeed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_decryptData();
      }
    }

    public void encrypt(byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      encrypt_call method_call = new encrypt_call(type, data, downSeed, macSeed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class encrypt_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private byte type;
      private String data;
      private String downSeed;
      private String macSeed;
      public encrypt_call(byte type, String data, String downSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.data = data;
        this.downSeed = downSeed;
        this.macSeed = macSeed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("encrypt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        encrypt_args args = new encrypt_args();
        args.setType(type);
        args.setData(data);
        args.setDownSeed(downSeed);
        args.setMacSeed(macSeed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_encrypt();
      }
    }

    public void decrypt(byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      decrypt_call method_call = new decrypt_call(type, data, upSeed, macSeed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class decrypt_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private byte type;
      private String data;
      private String upSeed;
      private String macSeed;
      public decrypt_call(byte type, String data, String upSeed, String macSeed, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.data = data;
        this.upSeed = upSeed;
        this.macSeed = macSeed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("decrypt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        decrypt_args args = new decrypt_args();
        args.setType(type);
        args.setData(data);
        args.setUpSeed(upSeed);
        args.setMacSeed(macSeed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_decrypt();
      }
    }

    public void requestSEKey(String masterKey, String hid, String pubKey, org.apache.thrift.async.AsyncMethodCallback<SEKey> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestSEKey_call method_call = new requestSEKey_call(masterKey, hid, pubKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestSEKey_call extends org.apache.thrift.async.TAsyncMethodCall<SEKey> {
      private String masterKey;
      private String hid;
      private String pubKey;
      public requestSEKey_call(String masterKey, String hid, String pubKey, org.apache.thrift.async.AsyncMethodCallback<SEKey> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterKey = masterKey;
        this.hid = hid;
        this.pubKey = pubKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestSEKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestSEKey_args args = new requestSEKey_args();
        args.setMasterKey(masterKey);
        args.setHid(hid);
        args.setPubKey(pubKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SEKey getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestSEKey();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getKeysInfo", new getKeysInfo());
      processMap.put("Sign", new Sign());
      processMap.put("Verify", new Verify());
      processMap.put("Verifyex", new Verifyex());
      processMap.put("encryptData", new encryptData());
      processMap.put("decryptData", new decryptData());
      processMap.put("encrypt", new encrypt());
      processMap.put("decrypt", new decrypt());
      processMap.put("requestSEKey", new requestSEKey());
      return processMap;
    }

    public static class getKeysInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKeysInfo_args> {
      public getKeysInfo() {
        super("getKeysInfo");
      }

      public getKeysInfo_args getEmptyArgsInstance() {
        return new getKeysInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getKeysInfo_result getResult(I iface, getKeysInfo_args args) throws org.apache.thrift.TException {
        getKeysInfo_result result = new getKeysInfo_result();
        result.success = iface.getKeysInfo();
        return result;
      }
    }

    public static class Sign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Sign_args> {
      public Sign() {
        super("Sign");
      }

      public Sign_args getEmptyArgsInstance() {
        return new Sign_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Sign_result getResult(I iface, Sign_args args) throws org.apache.thrift.TException {
        Sign_result result = new Sign_result();
        result.success = iface.Sign(args.message, args.privateKey);
        return result;
      }
    }

    public static class Verify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Verify_args> {
      public Verify() {
        super("Verify");
      }

      public Verify_args getEmptyArgsInstance() {
        return new Verify_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Verify_result getResult(I iface, Verify_args args) throws org.apache.thrift.TException {
        Verify_result result = new Verify_result();
        result.success = iface.Verify(args.message, args.sig, args.publicKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Verifyex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Verifyex_args> {
      public Verifyex() {
        super("Verifyex");
      }

      public Verifyex_args getEmptyArgsInstance() {
        return new Verifyex_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Verifyex_result getResult(I iface, Verifyex_args args) throws org.apache.thrift.TException {
        Verifyex_result result = new Verifyex_result();
        result.success = iface.Verifyex(args.message, args.sig, args.pub, args.isSM);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class encryptData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, encryptData_args> {
      public encryptData() {
        super("encryptData");
      }

      public encryptData_args getEmptyArgsInstance() {
        return new encryptData_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public encryptData_result getResult(I iface, encryptData_args args) throws org.apache.thrift.TException {
        encryptData_result result = new encryptData_result();
        result.success = iface.encryptData(args.masterKey, args.type, args.data, args.downSeed, args.macSeed);
        return result;
      }
    }

    public static class decryptData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, decryptData_args> {
      public decryptData() {
        super("decryptData");
      }

      public decryptData_args getEmptyArgsInstance() {
        return new decryptData_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public decryptData_result getResult(I iface, decryptData_args args) throws org.apache.thrift.TException {
        decryptData_result result = new decryptData_result();
        result.success = iface.decryptData(args.masterKey, args.type, args.data, args.upSeed, args.macSeed);
        return result;
      }
    }

    public static class encrypt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, encrypt_args> {
      public encrypt() {
        super("encrypt");
      }

      public encrypt_args getEmptyArgsInstance() {
        return new encrypt_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public encrypt_result getResult(I iface, encrypt_args args) throws org.apache.thrift.TException {
        encrypt_result result = new encrypt_result();
        result.success = iface.encrypt(args.type, args.data, args.downSeed, args.macSeed);
        return result;
      }
    }

    public static class decrypt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, decrypt_args> {
      public decrypt() {
        super("decrypt");
      }

      public decrypt_args getEmptyArgsInstance() {
        return new decrypt_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public decrypt_result getResult(I iface, decrypt_args args) throws org.apache.thrift.TException {
        decrypt_result result = new decrypt_result();
        result.success = iface.decrypt(args.type, args.data, args.upSeed, args.macSeed);
        return result;
      }
    }

    public static class requestSEKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestSEKey_args> {
      public requestSEKey() {
        super("requestSEKey");
      }

      public requestSEKey_args getEmptyArgsInstance() {
        return new requestSEKey_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestSEKey_result getResult(I iface, requestSEKey_args args) throws org.apache.thrift.TException {
        requestSEKey_result result = new requestSEKey_result();
        result.success = iface.requestSEKey(args.masterKey, args.hid, args.pubKey);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getKeysInfo", new getKeysInfo());
      processMap.put("Sign", new Sign());
      processMap.put("Verify", new Verify());
      processMap.put("Verifyex", new Verifyex());
      processMap.put("encryptData", new encryptData());
      processMap.put("decryptData", new decryptData());
      processMap.put("encrypt", new encrypt());
      processMap.put("decrypt", new decrypt());
      processMap.put("requestSEKey", new requestSEKey());
      return processMap;
    }

    public static class getKeysInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKeysInfo_args, java.util.List<java.util.Map<String,KeyInfo>>> {
      public getKeysInfo() {
        super("getKeysInfo");
      }

      public getKeysInfo_args getEmptyArgsInstance() {
        return new getKeysInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String,KeyInfo>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String,KeyInfo>>>() {
          public void onComplete(java.util.List<java.util.Map<String,KeyInfo>> o) {
            getKeysInfo_result result = new getKeysInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getKeysInfo_result result = new getKeysInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKeysInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<String,KeyInfo>>> resultHandler) throws org.apache.thrift.TException {
        iface.getKeysInfo(resultHandler);
      }
    }

    public static class Sign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Sign_args, String> {
      public Sign() {
        super("Sign");
      }

      public Sign_args getEmptyArgsInstance() {
        return new Sign_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            Sign_result result = new Sign_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Sign_result result = new Sign_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Sign_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.Sign(args.message, args.privateKey,resultHandler);
      }
    }

    public static class Verify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Verify_args, Boolean> {
      public Verify() {
        super("Verify");
      }

      public Verify_args getEmptyArgsInstance() {
        return new Verify_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            Verify_result result = new Verify_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Verify_result result = new Verify_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Verify_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Verify(args.message, args.sig, args.publicKey,resultHandler);
      }
    }

    public static class Verifyex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Verifyex_args, Boolean> {
      public Verifyex() {
        super("Verifyex");
      }

      public Verifyex_args getEmptyArgsInstance() {
        return new Verifyex_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            Verifyex_result result = new Verifyex_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Verifyex_result result = new Verifyex_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Verifyex_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Verifyex(args.message, args.sig, args.pub, args.isSM,resultHandler);
      }
    }

    public static class encryptData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, encryptData_args, String> {
      public encryptData() {
        super("encryptData");
      }

      public encryptData_args getEmptyArgsInstance() {
        return new encryptData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            encryptData_result result = new encryptData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            encryptData_result result = new encryptData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, encryptData_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.encryptData(args.masterKey, args.type, args.data, args.downSeed, args.macSeed,resultHandler);
      }
    }

    public static class decryptData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, decryptData_args, String> {
      public decryptData() {
        super("decryptData");
      }

      public decryptData_args getEmptyArgsInstance() {
        return new decryptData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            decryptData_result result = new decryptData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            decryptData_result result = new decryptData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, decryptData_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.decryptData(args.masterKey, args.type, args.data, args.upSeed, args.macSeed,resultHandler);
      }
    }

    public static class encrypt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, encrypt_args, String> {
      public encrypt() {
        super("encrypt");
      }

      public encrypt_args getEmptyArgsInstance() {
        return new encrypt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            encrypt_result result = new encrypt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            encrypt_result result = new encrypt_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, encrypt_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.encrypt(args.type, args.data, args.downSeed, args.macSeed,resultHandler);
      }
    }

    public static class decrypt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, decrypt_args, String> {
      public decrypt() {
        super("decrypt");
      }

      public decrypt_args getEmptyArgsInstance() {
        return new decrypt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            decrypt_result result = new decrypt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            decrypt_result result = new decrypt_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, decrypt_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.decrypt(args.type, args.data, args.upSeed, args.macSeed,resultHandler);
      }
    }

    public static class requestSEKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestSEKey_args, SEKey> {
      public requestSEKey() {
        super("requestSEKey");
      }

      public requestSEKey_args getEmptyArgsInstance() {
        return new requestSEKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SEKey> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SEKey>() {
          public void onComplete(SEKey o) {
            requestSEKey_result result = new requestSEKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestSEKey_result result = new requestSEKey_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestSEKey_args args, org.apache.thrift.async.AsyncMethodCallback<SEKey> resultHandler) throws org.apache.thrift.TException {
        iface.requestSEKey(args.masterKey, args.hid, args.pubKey,resultHandler);
      }
    }

  }

  public static class getKeysInfo_args implements org.apache.thrift.TBase<getKeysInfo_args, getKeysInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKeysInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeysInfo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getKeysInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getKeysInfo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeysInfo_args.class, metaDataMap);
    }

    public getKeysInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeysInfo_args(getKeysInfo_args other) {
    }

    public getKeysInfo_args deepCopy() {
      return new getKeysInfo_args(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeysInfo_args)
        return this.equals((getKeysInfo_args)that);
      return false;
    }

    public boolean equals(getKeysInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(getKeysInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("getKeysInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeysInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getKeysInfo_argsStandardScheme getScheme() {
        return new getKeysInfo_argsStandardScheme();
      }
    }

    private static class getKeysInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getKeysInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeysInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeysInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeysInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getKeysInfo_argsTupleScheme getScheme() {
        return new getKeysInfo_argsTupleScheme();
      }
    }

    private static class getKeysInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getKeysInfo_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getKeysInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getKeysInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getKeysInfo_result implements org.apache.thrift.TBase<getKeysInfo_result, getKeysInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKeysInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeysInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getKeysInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getKeysInfo_resultTupleSchemeFactory();

    public java.util.List<java.util.Map<String,KeyInfo>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyInfo.class)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeysInfo_result.class, metaDataMap);
    }

    public getKeysInfo_result() {
    }

    public getKeysInfo_result(
      java.util.List<java.util.Map<String,KeyInfo>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeysInfo_result(getKeysInfo_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.Map<String,KeyInfo>> __this__success = new java.util.ArrayList<java.util.Map<String,KeyInfo>>(other.success.size());
        for (java.util.Map<String,KeyInfo> other_element : other.success) {
          java.util.Map<String,KeyInfo> __this__success_copy = new java.util.HashMap<String,KeyInfo>(other_element.size());
          for (java.util.Map.Entry<String, KeyInfo> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            KeyInfo other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            KeyInfo __this__success_copy_copy_value = new KeyInfo(other_element_element_value);

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getKeysInfo_result deepCopy() {
      return new getKeysInfo_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.Map<String,KeyInfo>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.Map<String,KeyInfo> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.Map<String,KeyInfo>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.Map<String,KeyInfo>> getSuccess() {
      return this.success;
    }

    public getKeysInfo_result setSuccess(java.util.List<java.util.Map<String,KeyInfo>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.Map<String,KeyInfo>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeysInfo_result)
        return this.equals((getKeysInfo_result)that);
      return false;
    }

    public boolean equals(getKeysInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getKeysInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("getKeysInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeysInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getKeysInfo_resultStandardScheme getScheme() {
        return new getKeysInfo_resultStandardScheme();
      }
    }

    private static class getKeysInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getKeysInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeysInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.Map<String,KeyInfo>>(_list0.size);
                  java.util.Map<String,KeyInfo> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                      _elem1 = new java.util.HashMap<String,KeyInfo>(2*_map3.size);
                      String _key4;
                      KeyInfo _val5;
                      for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                      {
                        _key4 = iprot.readString();
                        _val5 = new KeyInfo();
                        _val5.read(iprot);
                        _elem1.put(_key4, _val5);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeysInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (java.util.Map<String,KeyInfo> _iter7 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter7.size()));
                for (java.util.Map.Entry<String, KeyInfo> _iter8 : _iter7.entrySet())
                {
                  oprot.writeString(_iter8.getKey());
                  _iter8.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeysInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getKeysInfo_resultTupleScheme getScheme() {
        return new getKeysInfo_resultTupleScheme();
      }
    }

    private static class getKeysInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getKeysInfo_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getKeysInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map<String,KeyInfo> _iter9 : struct.success)
            {
              {
                oprot.writeI32(_iter9.size());
                for (java.util.Map.Entry<String, KeyInfo> _iter10 : _iter9.entrySet())
                {
                  oprot.writeString(_iter10.getKey());
                  _iter10.getValue().write(oprot);
                }
              }
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getKeysInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.Map<String,KeyInfo>>(_list11.size);
            java.util.Map<String,KeyInfo> _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              {
                org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem12 = new java.util.HashMap<String,KeyInfo>(2*_map14.size);
                String _key15;
                KeyInfo _val16;
                for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                {
                  _key15 = iprot.readString();
                  _val16 = new KeyInfo();
                  _val16.read(iprot);
                  _elem12.put(_key15, _val16);
                }
              }
              struct.success.add(_elem12);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Sign_args implements org.apache.thrift.TBase<Sign_args, Sign_args._Fields>, java.io.Serializable, Cloneable, Comparable<Sign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sign_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIVATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privateKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sign_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sign_argsTupleSchemeFactory();

    public String message; // required
    public String privateKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      PRIVATE_KEY((short)2, "privateKey");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // PRIVATE_KEY
            return PRIVATE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIVATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("privateKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sign_args.class, metaDataMap);
    }

    public Sign_args() {
    }

    public Sign_args(
      String message,
      String privateKey)
    {
      this();
      this.message = message;
      this.privateKey = privateKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sign_args(Sign_args other) {
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetPrivateKey()) {
        this.privateKey = other.privateKey;
      }
    }

    public Sign_args deepCopy() {
      return new Sign_args(this);
    }


    public void clear() {
      this.message = null;
      this.privateKey = null;
    }

    public String getMessage() {
      return this.message;
    }

    public Sign_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public String getPrivateKey() {
      return this.privateKey;
    }

    public Sign_args setPrivateKey(String privateKey) {
      this.privateKey = privateKey;
      return this;
    }

    public void unsetPrivateKey() {
      this.privateKey = null;
    }

    /** Returns true if field privateKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrivateKey() {
      return this.privateKey != null;
    }

    public void setPrivateKeyIsSet(boolean value) {
      if (!value) {
        this.privateKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case PRIVATE_KEY:
        if (value == null) {
          unsetPrivateKey();
        } else {
          setPrivateKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case PRIVATE_KEY:
        return getPrivateKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case PRIVATE_KEY:
        return isSetPrivateKey();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Sign_args)
        return this.equals((Sign_args)that);
      return false;
    }

    public boolean equals(Sign_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_privateKey = true && this.isSetPrivateKey();
      boolean that_present_privateKey = true && that.isSetPrivateKey();
      if (this_present_privateKey || that_present_privateKey) {
        if (!(this_present_privateKey && that_present_privateKey))
          return false;
        if (!this.privateKey.equals(that.privateKey))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrivateKey()) ? 131071 : 524287);
      if (isSetPrivateKey())
        hashCode = hashCode * 8191 + privateKey.hashCode();

      return hashCode;
    }


    public int compareTo(Sign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrivateKey()).compareTo(other.isSetPrivateKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrivateKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateKey, other.privateKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("Sign_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privateKey:");
      if (this.privateKey == null) {
        sb.append("null");
      } else {
        sb.append(this.privateKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sign_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sign_argsStandardScheme getScheme() {
        return new Sign_argsStandardScheme();
      }
    }

    private static class Sign_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIVATE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.privateKey = iprot.readString();
                struct.setPrivateKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.privateKey != null) {
          oprot.writeFieldBegin(PRIVATE_KEY_FIELD_DESC);
          oprot.writeString(struct.privateKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sign_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sign_argsTupleScheme getScheme() {
        return new Sign_argsTupleScheme();
      }
    }

    private static class Sign_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sign_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Sign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetPrivateKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetPrivateKey()) {
          oprot.writeString(struct.privateKey);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Sign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.privateKey = iprot.readString();
          struct.setPrivateKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Sign_result implements org.apache.thrift.TBase<Sign_result, Sign_result._Fields>, java.io.Serializable, Cloneable, Comparable<Sign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sign_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sign_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sign_result.class, metaDataMap);
    }

    public Sign_result() {
    }

    public Sign_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sign_result(Sign_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Sign_result deepCopy() {
      return new Sign_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Sign_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Sign_result)
        return this.equals((Sign_result)that);
      return false;
    }

    public boolean equals(Sign_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(Sign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("Sign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sign_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sign_resultStandardScheme getScheme() {
        return new Sign_resultStandardScheme();
      }
    }

    private static class Sign_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sign_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sign_resultTupleScheme getScheme() {
        return new Sign_resultTupleScheme();
      }
    }

    private static class Sign_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sign_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Sign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Sign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Verify_args implements org.apache.thrift.TBase<Verify_args, Verify_args._Fields>, java.io.Serializable, Cloneable, Comparable<Verify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Verify_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Verify_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Verify_argsTupleSchemeFactory();

    public String message; // required
    public String sig; // required
    public String publicKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      SIG((short)2, "sig"),
      PUBLIC_KEY((short)3, "publicKey");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // SIG
            return SIG;
          case 3: // PUBLIC_KEY
            return PUBLIC_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Verify_args.class, metaDataMap);
    }

    public Verify_args() {
    }

    public Verify_args(
      String message,
      String sig,
      String publicKey)
    {
      this();
      this.message = message;
      this.sig = sig;
      this.publicKey = publicKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Verify_args(Verify_args other) {
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetSig()) {
        this.sig = other.sig;
      }
      if (other.isSetPublicKey()) {
        this.publicKey = other.publicKey;
      }
    }

    public Verify_args deepCopy() {
      return new Verify_args(this);
    }


    public void clear() {
      this.message = null;
      this.sig = null;
      this.publicKey = null;
    }

    public String getMessage() {
      return this.message;
    }

    public Verify_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public String getSig() {
      return this.sig;
    }

    public Verify_args setSig(String sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getPublicKey() {
      return this.publicKey;
    }

    public Verify_args setPublicKey(String publicKey) {
      this.publicKey = publicKey;
      return this;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((String)value);
        }
        break;

      case PUBLIC_KEY:
        if (value == null) {
          unsetPublicKey();
        } else {
          setPublicKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case SIG:
        return getSig();

      case PUBLIC_KEY:
        return getPublicKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case SIG:
        return isSetSig();
      case PUBLIC_KEY:
        return isSetPublicKey();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Verify_args)
        return this.equals((Verify_args)that);
      return false;
    }

    public boolean equals(Verify_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetSig()) ? 131071 : 524287);
      if (isSetSig())
        hashCode = hashCode * 8191 + sig.hashCode();

      hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
      if (isSetPublicKey())
        hashCode = hashCode * 8191 + publicKey.hashCode();

      return hashCode;
    }


    public int compareTo(Verify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSig()).compareTo(other.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, other.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("Verify_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Verify_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verify_argsStandardScheme getScheme() {
        return new Verify_argsStandardScheme();
      }
    }

    private static class Verify_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Verify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sig = iprot.readString();
                struct.setSigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PUBLIC_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.publicKey = iprot.readString();
                struct.setPublicKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Verify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          oprot.writeString(struct.sig);
          oprot.writeFieldEnd();
        }
        if (struct.publicKey != null) {
          oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
          oprot.writeString(struct.publicKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Verify_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verify_argsTupleScheme getScheme() {
        return new Verify_argsTupleScheme();
      }
    }

    private static class Verify_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Verify_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetSig()) {
          optionals.set(1);
        }
        if (struct.isSetPublicKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetSig()) {
          oprot.writeString(struct.sig);
        }
        if (struct.isSetPublicKey()) {
          oprot.writeString(struct.publicKey);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Verify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sig = iprot.readString();
          struct.setSigIsSet(true);
        }
        if (incoming.get(2)) {
          struct.publicKey = iprot.readString();
          struct.setPublicKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Verify_result implements org.apache.thrift.TBase<Verify_result, Verify_result._Fields>, java.io.Serializable, Cloneable, Comparable<Verify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Verify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Verify_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Verify_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Verify_result.class, metaDataMap);
    }

    public Verify_result() {
    }

    public Verify_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Verify_result(Verify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public Verify_result deepCopy() {
      return new Verify_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Verify_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Verify_result)
        return this.equals((Verify_result)that);
      return false;
    }

    public boolean equals(Verify_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }


    public int compareTo(Verify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("Verify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Verify_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verify_resultStandardScheme getScheme() {
        return new Verify_resultStandardScheme();
      }
    }

    private static class Verify_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Verify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Verify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Verify_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verify_resultTupleScheme getScheme() {
        return new Verify_resultTupleScheme();
      }
    }

    private static class Verify_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Verify_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Verify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Verifyex_args implements org.apache.thrift.TBase<Verifyex_args, Verifyex_args._Fields>, java.io.Serializable, Cloneable, Comparable<Verifyex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Verifyex_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PUB_FIELD_DESC = new org.apache.thrift.protocol.TField("pub", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IS_SM_FIELD_DESC = new org.apache.thrift.protocol.TField("isSM", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Verifyex_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Verifyex_argsTupleSchemeFactory();

    public String message; // required
    public String sig; // required
    public String pub; // required
    public boolean isSM; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      SIG((short)2, "sig"),
      PUB((short)3, "pub"),
      IS_SM((short)4, "isSM");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // SIG
            return SIG;
          case 3: // PUB
            return PUB;
          case 4: // IS_SM
            return IS_SM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISSM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUB, new org.apache.thrift.meta_data.FieldMetaData("pub", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_SM, new org.apache.thrift.meta_data.FieldMetaData("isSM", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Verifyex_args.class, metaDataMap);
    }

    public Verifyex_args() {
    }

    public Verifyex_args(
      String message,
      String sig,
      String pub,
      boolean isSM)
    {
      this();
      this.message = message;
      this.sig = sig;
      this.pub = pub;
      this.isSM = isSM;
      setIsSMIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Verifyex_args(Verifyex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetSig()) {
        this.sig = other.sig;
      }
      if (other.isSetPub()) {
        this.pub = other.pub;
      }
      this.isSM = other.isSM;
    }

    public Verifyex_args deepCopy() {
      return new Verifyex_args(this);
    }


    public void clear() {
      this.message = null;
      this.sig = null;
      this.pub = null;
      setIsSMIsSet(false);
      this.isSM = false;
    }

    public String getMessage() {
      return this.message;
    }

    public Verifyex_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public String getSig() {
      return this.sig;
    }

    public Verifyex_args setSig(String sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getPub() {
      return this.pub;
    }

    public Verifyex_args setPub(String pub) {
      this.pub = pub;
      return this;
    }

    public void unsetPub() {
      this.pub = null;
    }

    /** Returns true if field pub is set (has been assigned a value) and false otherwise */
    public boolean isSetPub() {
      return this.pub != null;
    }

    public void setPubIsSet(boolean value) {
      if (!value) {
        this.pub = null;
      }
    }

    public boolean isIsSM() {
      return this.isSM;
    }

    public Verifyex_args setIsSM(boolean isSM) {
      this.isSM = isSM;
      setIsSMIsSet(true);
      return this;
    }

    public void unsetIsSM() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSM_ISSET_ID);
    }

    /** Returns true if field isSM is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSM() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSM_ISSET_ID);
    }

    public void setIsSMIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((String)value);
        }
        break;

      case PUB:
        if (value == null) {
          unsetPub();
        } else {
          setPub((String)value);
        }
        break;

      case IS_SM:
        if (value == null) {
          unsetIsSM();
        } else {
          setIsSM((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case SIG:
        return getSig();

      case PUB:
        return getPub();

      case IS_SM:
        return isIsSM();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case SIG:
        return isSetSig();
      case PUB:
        return isSetPub();
      case IS_SM:
        return isSetIsSM();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Verifyex_args)
        return this.equals((Verifyex_args)that);
      return false;
    }

    public boolean equals(Verifyex_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_pub = true && this.isSetPub();
      boolean that_present_pub = true && that.isSetPub();
      if (this_present_pub || that_present_pub) {
        if (!(this_present_pub && that_present_pub))
          return false;
        if (!this.pub.equals(that.pub))
          return false;
      }

      boolean this_present_isSM = true;
      boolean that_present_isSM = true;
      if (this_present_isSM || that_present_isSM) {
        if (!(this_present_isSM && that_present_isSM))
          return false;
        if (this.isSM != that.isSM)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetSig()) ? 131071 : 524287);
      if (isSetSig())
        hashCode = hashCode * 8191 + sig.hashCode();

      hashCode = hashCode * 8191 + ((isSetPub()) ? 131071 : 524287);
      if (isSetPub())
        hashCode = hashCode * 8191 + pub.hashCode();

      hashCode = hashCode * 8191 + ((isSM) ? 131071 : 524287);

      return hashCode;
    }


    public int compareTo(Verifyex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSig()).compareTo(other.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, other.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPub()).compareTo(other.isSetPub());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPub()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pub, other.pub);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsSM()).compareTo(other.isSetIsSM());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSM()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSM, other.isSM);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("Verifyex_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pub:");
      if (this.pub == null) {
        sb.append("null");
      } else {
        sb.append(this.pub);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isSM:");
      sb.append(this.isSM);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Verifyex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verifyex_argsStandardScheme getScheme() {
        return new Verifyex_argsStandardScheme();
      }
    }

    private static class Verifyex_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Verifyex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Verifyex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sig = iprot.readString();
                struct.setSigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PUB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pub = iprot.readString();
                struct.setPubIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_SM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSM = iprot.readBool();
                struct.setIsSMIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Verifyex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          oprot.writeString(struct.sig);
          oprot.writeFieldEnd();
        }
        if (struct.pub != null) {
          oprot.writeFieldBegin(PUB_FIELD_DESC);
          oprot.writeString(struct.pub);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_SM_FIELD_DESC);
        oprot.writeBool(struct.isSM);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Verifyex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verifyex_argsTupleScheme getScheme() {
        return new Verifyex_argsTupleScheme();
      }
    }

    private static class Verifyex_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Verifyex_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Verifyex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetSig()) {
          optionals.set(1);
        }
        if (struct.isSetPub()) {
          optionals.set(2);
        }
        if (struct.isSetIsSM()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetSig()) {
          oprot.writeString(struct.sig);
        }
        if (struct.isSetPub()) {
          oprot.writeString(struct.pub);
        }
        if (struct.isSetIsSM()) {
          oprot.writeBool(struct.isSM);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Verifyex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sig = iprot.readString();
          struct.setSigIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pub = iprot.readString();
          struct.setPubIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isSM = iprot.readBool();
          struct.setIsSMIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Verifyex_result implements org.apache.thrift.TBase<Verifyex_result, Verifyex_result._Fields>, java.io.Serializable, Cloneable, Comparable<Verifyex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Verifyex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Verifyex_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Verifyex_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Verifyex_result.class, metaDataMap);
    }

    public Verifyex_result() {
    }

    public Verifyex_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Verifyex_result(Verifyex_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public Verifyex_result deepCopy() {
      return new Verifyex_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Verifyex_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Verifyex_result)
        return this.equals((Verifyex_result)that);
      return false;
    }

    public boolean equals(Verifyex_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }


    public int compareTo(Verifyex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("Verifyex_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Verifyex_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verifyex_resultStandardScheme getScheme() {
        return new Verifyex_resultStandardScheme();
      }
    }

    private static class Verifyex_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Verifyex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Verifyex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Verifyex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Verifyex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Verifyex_resultTupleScheme getScheme() {
        return new Verifyex_resultTupleScheme();
      }
    }

    private static class Verifyex_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Verifyex_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, Verifyex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, Verifyex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class encryptData_args implements org.apache.thrift.TBase<encryptData_args, encryptData_args._Fields>, java.io.Serializable, Cloneable, Comparable<encryptData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("encryptData_args");

    private static final org.apache.thrift.protocol.TField MASTER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("masterKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DOWN_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("downSeed", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MAC_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("macSeed", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new encryptData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new encryptData_argsTupleSchemeFactory();

    public String masterKey; // required
    public byte type; // required
    public String data; // required
    public String downSeed; // required
    public String macSeed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_KEY((short)1, "masterKey"),
      TYPE((short)2, "type"),
      DATA((short)3, "data"),
      DOWN_SEED((short)4, "downSeed"),
      MAC_SEED((short)5, "macSeed");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_KEY
            return MASTER_KEY;
          case 2: // TYPE
            return TYPE;
          case 3: // DATA
            return DATA;
          case 4: // DOWN_SEED
            return DOWN_SEED;
          case 5: // MAC_SEED
            return MAC_SEED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_KEY, new org.apache.thrift.meta_data.FieldMetaData("masterKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOWN_SEED, new org.apache.thrift.meta_data.FieldMetaData("downSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_SEED, new org.apache.thrift.meta_data.FieldMetaData("macSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(encryptData_args.class, metaDataMap);
    }

    public encryptData_args() {
    }

    public encryptData_args(
      String masterKey,
      byte type,
      String data,
      String downSeed,
      String macSeed)
    {
      this();
      this.masterKey = masterKey;
      this.type = type;
      setTypeIsSet(true);
      this.data = data;
      this.downSeed = downSeed;
      this.macSeed = macSeed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public encryptData_args(encryptData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterKey()) {
        this.masterKey = other.masterKey;
      }
      this.type = other.type;
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetDownSeed()) {
        this.downSeed = other.downSeed;
      }
      if (other.isSetMacSeed()) {
        this.macSeed = other.macSeed;
      }
    }

    public encryptData_args deepCopy() {
      return new encryptData_args(this);
    }


    public void clear() {
      this.masterKey = null;
      setTypeIsSet(false);
      this.type = 0;
      this.data = null;
      this.downSeed = null;
      this.macSeed = null;
    }

    public String getMasterKey() {
      return this.masterKey;
    }

    public encryptData_args setMasterKey(String masterKey) {
      this.masterKey = masterKey;
      return this;
    }

    public void unsetMasterKey() {
      this.masterKey = null;
    }

    /** Returns true if field masterKey is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterKey() {
      return this.masterKey != null;
    }

    public void setMasterKeyIsSet(boolean value) {
      if (!value) {
        this.masterKey = null;
      }
    }

    public byte getType() {
      return this.type;
    }

    public encryptData_args setType(byte type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public encryptData_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getDownSeed() {
      return this.downSeed;
    }

    public encryptData_args setDownSeed(String downSeed) {
      this.downSeed = downSeed;
      return this;
    }

    public void unsetDownSeed() {
      this.downSeed = null;
    }

    /** Returns true if field downSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetDownSeed() {
      return this.downSeed != null;
    }

    public void setDownSeedIsSet(boolean value) {
      if (!value) {
        this.downSeed = null;
      }
    }

    public String getMacSeed() {
      return this.macSeed;
    }

    public encryptData_args setMacSeed(String macSeed) {
      this.macSeed = macSeed;
      return this;
    }

    public void unsetMacSeed() {
      this.macSeed = null;
    }

    /** Returns true if field macSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetMacSeed() {
      return this.macSeed != null;
    }

    public void setMacSeedIsSet(boolean value) {
      if (!value) {
        this.macSeed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASTER_KEY:
        if (value == null) {
          unsetMasterKey();
        } else {
          setMasterKey((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Byte)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      case DOWN_SEED:
        if (value == null) {
          unsetDownSeed();
        } else {
          setDownSeed((String)value);
        }
        break;

      case MAC_SEED:
        if (value == null) {
          unsetMacSeed();
        } else {
          setMacSeed((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_KEY:
        return getMasterKey();

      case TYPE:
        return getType();

      case DATA:
        return getData();

      case DOWN_SEED:
        return getDownSeed();

      case MAC_SEED:
        return getMacSeed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASTER_KEY:
        return isSetMasterKey();
      case TYPE:
        return isSetType();
      case DATA:
        return isSetData();
      case DOWN_SEED:
        return isSetDownSeed();
      case MAC_SEED:
        return isSetMacSeed();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof encryptData_args)
        return this.equals((encryptData_args)that);
      return false;
    }

    public boolean equals(encryptData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterKey = true && this.isSetMasterKey();
      boolean that_present_masterKey = true && that.isSetMasterKey();
      if (this_present_masterKey || that_present_masterKey) {
        if (!(this_present_masterKey && that_present_masterKey))
          return false;
        if (!this.masterKey.equals(that.masterKey))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_downSeed = true && this.isSetDownSeed();
      boolean that_present_downSeed = true && that.isSetDownSeed();
      if (this_present_downSeed || that_present_downSeed) {
        if (!(this_present_downSeed && that_present_downSeed))
          return false;
        if (!this.downSeed.equals(that.downSeed))
          return false;
      }

      boolean this_present_macSeed = true && this.isSetMacSeed();
      boolean that_present_macSeed = true && that.isSetMacSeed();
      if (this_present_macSeed || that_present_macSeed) {
        if (!(this_present_macSeed && that_present_macSeed))
          return false;
        if (!this.macSeed.equals(that.macSeed))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterKey()) ? 131071 : 524287);
      if (isSetMasterKey())
        hashCode = hashCode * 8191 + masterKey.hashCode();

      hashCode = hashCode * 8191 + (int) (type);

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetDownSeed()) ? 131071 : 524287);
      if (isSetDownSeed())
        hashCode = hashCode * 8191 + downSeed.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacSeed()) ? 131071 : 524287);
      if (isSetMacSeed())
        hashCode = hashCode * 8191 + macSeed.hashCode();

      return hashCode;
    }


    public int compareTo(encryptData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMasterKey()).compareTo(other.isSetMasterKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterKey, other.masterKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDownSeed()).compareTo(other.isSetDownSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDownSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downSeed, other.downSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacSeed()).compareTo(other.isSetMacSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macSeed, other.macSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("encryptData_args(");
      boolean first = true;

      sb.append("masterKey:");
      if (this.masterKey == null) {
        sb.append("null");
      } else {
        sb.append(this.masterKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("downSeed:");
      if (this.downSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.downSeed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macSeed:");
      if (this.macSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.macSeed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class encryptData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encryptData_argsStandardScheme getScheme() {
        return new encryptData_argsStandardScheme();
      }
    }

    private static class encryptData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<encryptData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, encryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterKey = iprot.readString();
                struct.setMasterKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.type = iprot.readByte();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DOWN_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.downSeed = iprot.readString();
                struct.setDownSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MAC_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macSeed = iprot.readString();
                struct.setMacSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, encryptData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterKey != null) {
          oprot.writeFieldBegin(MASTER_KEY_FIELD_DESC);
          oprot.writeString(struct.masterKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.downSeed != null) {
          oprot.writeFieldBegin(DOWN_SEED_FIELD_DESC);
          oprot.writeString(struct.downSeed);
          oprot.writeFieldEnd();
        }
        if (struct.macSeed != null) {
          oprot.writeFieldBegin(MAC_SEED_FIELD_DESC);
          oprot.writeString(struct.macSeed);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class encryptData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encryptData_argsTupleScheme getScheme() {
        return new encryptData_argsTupleScheme();
      }
    }

    private static class encryptData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<encryptData_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, encryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterKey()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        if (struct.isSetDownSeed()) {
          optionals.set(3);
        }
        if (struct.isSetMacSeed()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterKey()) {
          oprot.writeString(struct.masterKey);
        }
        if (struct.isSetType()) {
          oprot.writeByte(struct.type);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetDownSeed()) {
          oprot.writeString(struct.downSeed);
        }
        if (struct.isSetMacSeed()) {
          oprot.writeString(struct.macSeed);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, encryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterKey = iprot.readString();
          struct.setMasterKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readByte();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.downSeed = iprot.readString();
          struct.setDownSeedIsSet(true);
        }
        if (incoming.get(4)) {
          struct.macSeed = iprot.readString();
          struct.setMacSeedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class encryptData_result implements org.apache.thrift.TBase<encryptData_result, encryptData_result._Fields>, java.io.Serializable, Cloneable, Comparable<encryptData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("encryptData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new encryptData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new encryptData_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(encryptData_result.class, metaDataMap);
    }

    public encryptData_result() {
    }

    public encryptData_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public encryptData_result(encryptData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public encryptData_result deepCopy() {
      return new encryptData_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public encryptData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof encryptData_result)
        return this.equals((encryptData_result)that);
      return false;
    }

    public boolean equals(encryptData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(encryptData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("encryptData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class encryptData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encryptData_resultStandardScheme getScheme() {
        return new encryptData_resultStandardScheme();
      }
    }

    private static class encryptData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<encryptData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, encryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, encryptData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class encryptData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encryptData_resultTupleScheme getScheme() {
        return new encryptData_resultTupleScheme();
      }
    }

    private static class encryptData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<encryptData_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, encryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, encryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class decryptData_args implements org.apache.thrift.TBase<decryptData_args, decryptData_args._Fields>, java.io.Serializable, Cloneable, Comparable<decryptData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("decryptData_args");

    private static final org.apache.thrift.protocol.TField MASTER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("masterKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField UP_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("upSeed", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MAC_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("macSeed", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new decryptData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new decryptData_argsTupleSchemeFactory();

    public String masterKey; // required
    public byte type; // required
    public String data; // required
    public String upSeed; // required
    public String macSeed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_KEY((short)1, "masterKey"),
      TYPE((short)2, "type"),
      DATA((short)3, "data"),
      UP_SEED((short)4, "upSeed"),
      MAC_SEED((short)5, "macSeed");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_KEY
            return MASTER_KEY;
          case 2: // TYPE
            return TYPE;
          case 3: // DATA
            return DATA;
          case 4: // UP_SEED
            return UP_SEED;
          case 5: // MAC_SEED
            return MAC_SEED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_KEY, new org.apache.thrift.meta_data.FieldMetaData("masterKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UP_SEED, new org.apache.thrift.meta_data.FieldMetaData("upSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_SEED, new org.apache.thrift.meta_data.FieldMetaData("macSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(decryptData_args.class, metaDataMap);
    }

    public decryptData_args() {
    }

    public decryptData_args(
      String masterKey,
      byte type,
      String data,
      String upSeed,
      String macSeed)
    {
      this();
      this.masterKey = masterKey;
      this.type = type;
      setTypeIsSet(true);
      this.data = data;
      this.upSeed = upSeed;
      this.macSeed = macSeed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public decryptData_args(decryptData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterKey()) {
        this.masterKey = other.masterKey;
      }
      this.type = other.type;
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetUpSeed()) {
        this.upSeed = other.upSeed;
      }
      if (other.isSetMacSeed()) {
        this.macSeed = other.macSeed;
      }
    }

    public decryptData_args deepCopy() {
      return new decryptData_args(this);
    }


    public void clear() {
      this.masterKey = null;
      setTypeIsSet(false);
      this.type = 0;
      this.data = null;
      this.upSeed = null;
      this.macSeed = null;
    }

    public String getMasterKey() {
      return this.masterKey;
    }

    public decryptData_args setMasterKey(String masterKey) {
      this.masterKey = masterKey;
      return this;
    }

    public void unsetMasterKey() {
      this.masterKey = null;
    }

    /** Returns true if field masterKey is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterKey() {
      return this.masterKey != null;
    }

    public void setMasterKeyIsSet(boolean value) {
      if (!value) {
        this.masterKey = null;
      }
    }

    public byte getType() {
      return this.type;
    }

    public decryptData_args setType(byte type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public decryptData_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getUpSeed() {
      return this.upSeed;
    }

    public decryptData_args setUpSeed(String upSeed) {
      this.upSeed = upSeed;
      return this;
    }

    public void unsetUpSeed() {
      this.upSeed = null;
    }

    /** Returns true if field upSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetUpSeed() {
      return this.upSeed != null;
    }

    public void setUpSeedIsSet(boolean value) {
      if (!value) {
        this.upSeed = null;
      }
    }

    public String getMacSeed() {
      return this.macSeed;
    }

    public decryptData_args setMacSeed(String macSeed) {
      this.macSeed = macSeed;
      return this;
    }

    public void unsetMacSeed() {
      this.macSeed = null;
    }

    /** Returns true if field macSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetMacSeed() {
      return this.macSeed != null;
    }

    public void setMacSeedIsSet(boolean value) {
      if (!value) {
        this.macSeed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASTER_KEY:
        if (value == null) {
          unsetMasterKey();
        } else {
          setMasterKey((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Byte)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      case UP_SEED:
        if (value == null) {
          unsetUpSeed();
        } else {
          setUpSeed((String)value);
        }
        break;

      case MAC_SEED:
        if (value == null) {
          unsetMacSeed();
        } else {
          setMacSeed((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_KEY:
        return getMasterKey();

      case TYPE:
        return getType();

      case DATA:
        return getData();

      case UP_SEED:
        return getUpSeed();

      case MAC_SEED:
        return getMacSeed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASTER_KEY:
        return isSetMasterKey();
      case TYPE:
        return isSetType();
      case DATA:
        return isSetData();
      case UP_SEED:
        return isSetUpSeed();
      case MAC_SEED:
        return isSetMacSeed();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof decryptData_args)
        return this.equals((decryptData_args)that);
      return false;
    }

    public boolean equals(decryptData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterKey = true && this.isSetMasterKey();
      boolean that_present_masterKey = true && that.isSetMasterKey();
      if (this_present_masterKey || that_present_masterKey) {
        if (!(this_present_masterKey && that_present_masterKey))
          return false;
        if (!this.masterKey.equals(that.masterKey))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_upSeed = true && this.isSetUpSeed();
      boolean that_present_upSeed = true && that.isSetUpSeed();
      if (this_present_upSeed || that_present_upSeed) {
        if (!(this_present_upSeed && that_present_upSeed))
          return false;
        if (!this.upSeed.equals(that.upSeed))
          return false;
      }

      boolean this_present_macSeed = true && this.isSetMacSeed();
      boolean that_present_macSeed = true && that.isSetMacSeed();
      if (this_present_macSeed || that_present_macSeed) {
        if (!(this_present_macSeed && that_present_macSeed))
          return false;
        if (!this.macSeed.equals(that.macSeed))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterKey()) ? 131071 : 524287);
      if (isSetMasterKey())
        hashCode = hashCode * 8191 + masterKey.hashCode();

      hashCode = hashCode * 8191 + (int) (type);

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetUpSeed()) ? 131071 : 524287);
      if (isSetUpSeed())
        hashCode = hashCode * 8191 + upSeed.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacSeed()) ? 131071 : 524287);
      if (isSetMacSeed())
        hashCode = hashCode * 8191 + macSeed.hashCode();

      return hashCode;
    }


    public int compareTo(decryptData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMasterKey()).compareTo(other.isSetMasterKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterKey, other.masterKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpSeed()).compareTo(other.isSetUpSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upSeed, other.upSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacSeed()).compareTo(other.isSetMacSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macSeed, other.macSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("decryptData_args(");
      boolean first = true;

      sb.append("masterKey:");
      if (this.masterKey == null) {
        sb.append("null");
      } else {
        sb.append(this.masterKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("upSeed:");
      if (this.upSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.upSeed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macSeed:");
      if (this.macSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.macSeed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class decryptData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decryptData_argsStandardScheme getScheme() {
        return new decryptData_argsStandardScheme();
      }
    }

    private static class decryptData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<decryptData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, decryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterKey = iprot.readString();
                struct.setMasterKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.type = iprot.readByte();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UP_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.upSeed = iprot.readString();
                struct.setUpSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MAC_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macSeed = iprot.readString();
                struct.setMacSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, decryptData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterKey != null) {
          oprot.writeFieldBegin(MASTER_KEY_FIELD_DESC);
          oprot.writeString(struct.masterKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.upSeed != null) {
          oprot.writeFieldBegin(UP_SEED_FIELD_DESC);
          oprot.writeString(struct.upSeed);
          oprot.writeFieldEnd();
        }
        if (struct.macSeed != null) {
          oprot.writeFieldBegin(MAC_SEED_FIELD_DESC);
          oprot.writeString(struct.macSeed);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class decryptData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decryptData_argsTupleScheme getScheme() {
        return new decryptData_argsTupleScheme();
      }
    }

    private static class decryptData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<decryptData_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, decryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterKey()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        if (struct.isSetUpSeed()) {
          optionals.set(3);
        }
        if (struct.isSetMacSeed()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterKey()) {
          oprot.writeString(struct.masterKey);
        }
        if (struct.isSetType()) {
          oprot.writeByte(struct.type);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetUpSeed()) {
          oprot.writeString(struct.upSeed);
        }
        if (struct.isSetMacSeed()) {
          oprot.writeString(struct.macSeed);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, decryptData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterKey = iprot.readString();
          struct.setMasterKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readByte();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.upSeed = iprot.readString();
          struct.setUpSeedIsSet(true);
        }
        if (incoming.get(4)) {
          struct.macSeed = iprot.readString();
          struct.setMacSeedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class decryptData_result implements org.apache.thrift.TBase<decryptData_result, decryptData_result._Fields>, java.io.Serializable, Cloneable, Comparable<decryptData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("decryptData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new decryptData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new decryptData_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(decryptData_result.class, metaDataMap);
    }

    public decryptData_result() {
    }

    public decryptData_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public decryptData_result(decryptData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public decryptData_result deepCopy() {
      return new decryptData_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public decryptData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof decryptData_result)
        return this.equals((decryptData_result)that);
      return false;
    }

    public boolean equals(decryptData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(decryptData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("decryptData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class decryptData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decryptData_resultStandardScheme getScheme() {
        return new decryptData_resultStandardScheme();
      }
    }

    private static class decryptData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<decryptData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, decryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, decryptData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class decryptData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decryptData_resultTupleScheme getScheme() {
        return new decryptData_resultTupleScheme();
      }
    }

    private static class decryptData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<decryptData_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, decryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, decryptData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class encrypt_args implements org.apache.thrift.TBase<encrypt_args, encrypt_args._Fields>, java.io.Serializable, Cloneable, Comparable<encrypt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("encrypt_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOWN_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("downSeed", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MAC_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("macSeed", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new encrypt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new encrypt_argsTupleSchemeFactory();

    public byte type; // required
    public String data; // required
    public String downSeed; // required
    public String macSeed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      DATA((short)2, "data"),
      DOWN_SEED((short)3, "downSeed"),
      MAC_SEED((short)4, "macSeed");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // DATA
            return DATA;
          case 3: // DOWN_SEED
            return DOWN_SEED;
          case 4: // MAC_SEED
            return MAC_SEED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOWN_SEED, new org.apache.thrift.meta_data.FieldMetaData("downSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_SEED, new org.apache.thrift.meta_data.FieldMetaData("macSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(encrypt_args.class, metaDataMap);
    }

    public encrypt_args() {
    }

    public encrypt_args(
      byte type,
      String data,
      String downSeed,
      String macSeed)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.data = data;
      this.downSeed = downSeed;
      this.macSeed = macSeed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public encrypt_args(encrypt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetDownSeed()) {
        this.downSeed = other.downSeed;
      }
      if (other.isSetMacSeed()) {
        this.macSeed = other.macSeed;
      }
    }

    public encrypt_args deepCopy() {
      return new encrypt_args(this);
    }


    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.data = null;
      this.downSeed = null;
      this.macSeed = null;
    }

    public byte getType() {
      return this.type;
    }

    public encrypt_args setType(byte type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public encrypt_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getDownSeed() {
      return this.downSeed;
    }

    public encrypt_args setDownSeed(String downSeed) {
      this.downSeed = downSeed;
      return this;
    }

    public void unsetDownSeed() {
      this.downSeed = null;
    }

    /** Returns true if field downSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetDownSeed() {
      return this.downSeed != null;
    }

    public void setDownSeedIsSet(boolean value) {
      if (!value) {
        this.downSeed = null;
      }
    }

    public String getMacSeed() {
      return this.macSeed;
    }

    public encrypt_args setMacSeed(String macSeed) {
      this.macSeed = macSeed;
      return this;
    }

    public void unsetMacSeed() {
      this.macSeed = null;
    }

    /** Returns true if field macSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetMacSeed() {
      return this.macSeed != null;
    }

    public void setMacSeedIsSet(boolean value) {
      if (!value) {
        this.macSeed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Byte)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      case DOWN_SEED:
        if (value == null) {
          unsetDownSeed();
        } else {
          setDownSeed((String)value);
        }
        break;

      case MAC_SEED:
        if (value == null) {
          unsetMacSeed();
        } else {
          setMacSeed((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case DATA:
        return getData();

      case DOWN_SEED:
        return getDownSeed();

      case MAC_SEED:
        return getMacSeed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case DATA:
        return isSetData();
      case DOWN_SEED:
        return isSetDownSeed();
      case MAC_SEED:
        return isSetMacSeed();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof encrypt_args)
        return this.equals((encrypt_args)that);
      return false;
    }

    public boolean equals(encrypt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_downSeed = true && this.isSetDownSeed();
      boolean that_present_downSeed = true && that.isSetDownSeed();
      if (this_present_downSeed || that_present_downSeed) {
        if (!(this_present_downSeed && that_present_downSeed))
          return false;
        if (!this.downSeed.equals(that.downSeed))
          return false;
      }

      boolean this_present_macSeed = true && this.isSetMacSeed();
      boolean that_present_macSeed = true && that.isSetMacSeed();
      if (this_present_macSeed || that_present_macSeed) {
        if (!(this_present_macSeed && that_present_macSeed))
          return false;
        if (!this.macSeed.equals(that.macSeed))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (type);

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetDownSeed()) ? 131071 : 524287);
      if (isSetDownSeed())
        hashCode = hashCode * 8191 + downSeed.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacSeed()) ? 131071 : 524287);
      if (isSetMacSeed())
        hashCode = hashCode * 8191 + macSeed.hashCode();

      return hashCode;
    }


    public int compareTo(encrypt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDownSeed()).compareTo(other.isSetDownSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDownSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downSeed, other.downSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacSeed()).compareTo(other.isSetMacSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macSeed, other.macSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("encrypt_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("downSeed:");
      if (this.downSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.downSeed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macSeed:");
      if (this.macSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.macSeed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class encrypt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encrypt_argsStandardScheme getScheme() {
        return new encrypt_argsStandardScheme();
      }
    }

    private static class encrypt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<encrypt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, encrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.type = iprot.readByte();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOWN_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.downSeed = iprot.readString();
                struct.setDownSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAC_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macSeed = iprot.readString();
                struct.setMacSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, encrypt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.downSeed != null) {
          oprot.writeFieldBegin(DOWN_SEED_FIELD_DESC);
          oprot.writeString(struct.downSeed);
          oprot.writeFieldEnd();
        }
        if (struct.macSeed != null) {
          oprot.writeFieldBegin(MAC_SEED_FIELD_DESC);
          oprot.writeString(struct.macSeed);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class encrypt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encrypt_argsTupleScheme getScheme() {
        return new encrypt_argsTupleScheme();
      }
    }

    private static class encrypt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<encrypt_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, encrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        if (struct.isSetDownSeed()) {
          optionals.set(2);
        }
        if (struct.isSetMacSeed()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetType()) {
          oprot.writeByte(struct.type);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetDownSeed()) {
          oprot.writeString(struct.downSeed);
        }
        if (struct.isSetMacSeed()) {
          oprot.writeString(struct.macSeed);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, encrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.type = iprot.readByte();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.downSeed = iprot.readString();
          struct.setDownSeedIsSet(true);
        }
        if (incoming.get(3)) {
          struct.macSeed = iprot.readString();
          struct.setMacSeedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class encrypt_result implements org.apache.thrift.TBase<encrypt_result, encrypt_result._Fields>, java.io.Serializable, Cloneable, Comparable<encrypt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("encrypt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new encrypt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new encrypt_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(encrypt_result.class, metaDataMap);
    }

    public encrypt_result() {
    }

    public encrypt_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public encrypt_result(encrypt_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public encrypt_result deepCopy() {
      return new encrypt_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public encrypt_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof encrypt_result)
        return this.equals((encrypt_result)that);
      return false;
    }

    public boolean equals(encrypt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(encrypt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("encrypt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class encrypt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encrypt_resultStandardScheme getScheme() {
        return new encrypt_resultStandardScheme();
      }
    }

    private static class encrypt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<encrypt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, encrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, encrypt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class encrypt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public encrypt_resultTupleScheme getScheme() {
        return new encrypt_resultTupleScheme();
      }
    }

    private static class encrypt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<encrypt_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, encrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, encrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class decrypt_args implements org.apache.thrift.TBase<decrypt_args, decrypt_args._Fields>, java.io.Serializable, Cloneable, Comparable<decrypt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("decrypt_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField UP_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("upSeed", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MAC_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("macSeed", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new decrypt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new decrypt_argsTupleSchemeFactory();

    public byte type; // required
    public String data; // required
    public String upSeed; // required
    public String macSeed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      DATA((short)2, "data"),
      UP_SEED((short)3, "upSeed"),
      MAC_SEED((short)4, "macSeed");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // DATA
            return DATA;
          case 3: // UP_SEED
            return UP_SEED;
          case 4: // MAC_SEED
            return MAC_SEED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UP_SEED, new org.apache.thrift.meta_data.FieldMetaData("upSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_SEED, new org.apache.thrift.meta_data.FieldMetaData("macSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(decrypt_args.class, metaDataMap);
    }

    public decrypt_args() {
    }

    public decrypt_args(
      byte type,
      String data,
      String upSeed,
      String macSeed)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.data = data;
      this.upSeed = upSeed;
      this.macSeed = macSeed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public decrypt_args(decrypt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetUpSeed()) {
        this.upSeed = other.upSeed;
      }
      if (other.isSetMacSeed()) {
        this.macSeed = other.macSeed;
      }
    }

    public decrypt_args deepCopy() {
      return new decrypt_args(this);
    }


    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.data = null;
      this.upSeed = null;
      this.macSeed = null;
    }

    public byte getType() {
      return this.type;
    }

    public decrypt_args setType(byte type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public decrypt_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getUpSeed() {
      return this.upSeed;
    }

    public decrypt_args setUpSeed(String upSeed) {
      this.upSeed = upSeed;
      return this;
    }

    public void unsetUpSeed() {
      this.upSeed = null;
    }

    /** Returns true if field upSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetUpSeed() {
      return this.upSeed != null;
    }

    public void setUpSeedIsSet(boolean value) {
      if (!value) {
        this.upSeed = null;
      }
    }

    public String getMacSeed() {
      return this.macSeed;
    }

    public decrypt_args setMacSeed(String macSeed) {
      this.macSeed = macSeed;
      return this;
    }

    public void unsetMacSeed() {
      this.macSeed = null;
    }

    /** Returns true if field macSeed is set (has been assigned a value) and false otherwise */
    public boolean isSetMacSeed() {
      return this.macSeed != null;
    }

    public void setMacSeedIsSet(boolean value) {
      if (!value) {
        this.macSeed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Byte)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      case UP_SEED:
        if (value == null) {
          unsetUpSeed();
        } else {
          setUpSeed((String)value);
        }
        break;

      case MAC_SEED:
        if (value == null) {
          unsetMacSeed();
        } else {
          setMacSeed((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case DATA:
        return getData();

      case UP_SEED:
        return getUpSeed();

      case MAC_SEED:
        return getMacSeed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case DATA:
        return isSetData();
      case UP_SEED:
        return isSetUpSeed();
      case MAC_SEED:
        return isSetMacSeed();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof decrypt_args)
        return this.equals((decrypt_args)that);
      return false;
    }

    public boolean equals(decrypt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_upSeed = true && this.isSetUpSeed();
      boolean that_present_upSeed = true && that.isSetUpSeed();
      if (this_present_upSeed || that_present_upSeed) {
        if (!(this_present_upSeed && that_present_upSeed))
          return false;
        if (!this.upSeed.equals(that.upSeed))
          return false;
      }

      boolean this_present_macSeed = true && this.isSetMacSeed();
      boolean that_present_macSeed = true && that.isSetMacSeed();
      if (this_present_macSeed || that_present_macSeed) {
        if (!(this_present_macSeed && that_present_macSeed))
          return false;
        if (!this.macSeed.equals(that.macSeed))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (type);

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetUpSeed()) ? 131071 : 524287);
      if (isSetUpSeed())
        hashCode = hashCode * 8191 + upSeed.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacSeed()) ? 131071 : 524287);
      if (isSetMacSeed())
        hashCode = hashCode * 8191 + macSeed.hashCode();

      return hashCode;
    }


    public int compareTo(decrypt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpSeed()).compareTo(other.isSetUpSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upSeed, other.upSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacSeed()).compareTo(other.isSetMacSeed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacSeed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macSeed, other.macSeed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("decrypt_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("upSeed:");
      if (this.upSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.upSeed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macSeed:");
      if (this.macSeed == null) {
        sb.append("null");
      } else {
        sb.append(this.macSeed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class decrypt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decrypt_argsStandardScheme getScheme() {
        return new decrypt_argsStandardScheme();
      }
    }

    private static class decrypt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<decrypt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, decrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.type = iprot.readByte();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UP_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.upSeed = iprot.readString();
                struct.setUpSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAC_SEED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macSeed = iprot.readString();
                struct.setMacSeedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, decrypt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.upSeed != null) {
          oprot.writeFieldBegin(UP_SEED_FIELD_DESC);
          oprot.writeString(struct.upSeed);
          oprot.writeFieldEnd();
        }
        if (struct.macSeed != null) {
          oprot.writeFieldBegin(MAC_SEED_FIELD_DESC);
          oprot.writeString(struct.macSeed);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class decrypt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decrypt_argsTupleScheme getScheme() {
        return new decrypt_argsTupleScheme();
      }
    }

    private static class decrypt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<decrypt_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, decrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        if (struct.isSetUpSeed()) {
          optionals.set(2);
        }
        if (struct.isSetMacSeed()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetType()) {
          oprot.writeByte(struct.type);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetUpSeed()) {
          oprot.writeString(struct.upSeed);
        }
        if (struct.isSetMacSeed()) {
          oprot.writeString(struct.macSeed);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, decrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.type = iprot.readByte();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.upSeed = iprot.readString();
          struct.setUpSeedIsSet(true);
        }
        if (incoming.get(3)) {
          struct.macSeed = iprot.readString();
          struct.setMacSeedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class decrypt_result implements org.apache.thrift.TBase<decrypt_result, decrypt_result._Fields>, java.io.Serializable, Cloneable, Comparable<decrypt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("decrypt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new decrypt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new decrypt_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(decrypt_result.class, metaDataMap);
    }

    public decrypt_result() {
    }

    public decrypt_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public decrypt_result(decrypt_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public decrypt_result deepCopy() {
      return new decrypt_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public decrypt_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof decrypt_result)
        return this.equals((decrypt_result)that);
      return false;
    }

    public boolean equals(decrypt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(decrypt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("decrypt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class decrypt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decrypt_resultStandardScheme getScheme() {
        return new decrypt_resultStandardScheme();
      }
    }

    private static class decrypt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<decrypt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, decrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, decrypt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class decrypt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public decrypt_resultTupleScheme getScheme() {
        return new decrypt_resultTupleScheme();
      }
    }

    private static class decrypt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<decrypt_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, decrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, decrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestSEKey_args implements org.apache.thrift.TBase<requestSEKey_args, requestSEKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestSEKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSEKey_args");

    private static final org.apache.thrift.protocol.TField MASTER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("masterKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HID_FIELD_DESC = new org.apache.thrift.protocol.TField("hid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PUB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pubKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestSEKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestSEKey_argsTupleSchemeFactory();

    public String masterKey; // required
    public String hid; // required
    public String pubKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_KEY((short)1, "masterKey"),
      HID((short)2, "hid"),
      PUB_KEY((short)3, "pubKey");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_KEY
            return MASTER_KEY;
          case 2: // HID
            return HID;
          case 3: // PUB_KEY
            return PUB_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_KEY, new org.apache.thrift.meta_data.FieldMetaData("masterKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HID, new org.apache.thrift.meta_data.FieldMetaData("hid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUB_KEY, new org.apache.thrift.meta_data.FieldMetaData("pubKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSEKey_args.class, metaDataMap);
    }

    public requestSEKey_args() {
    }

    public requestSEKey_args(
      String masterKey,
      String hid,
      String pubKey)
    {
      this();
      this.masterKey = masterKey;
      this.hid = hid;
      this.pubKey = pubKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSEKey_args(requestSEKey_args other) {
      if (other.isSetMasterKey()) {
        this.masterKey = other.masterKey;
      }
      if (other.isSetHid()) {
        this.hid = other.hid;
      }
      if (other.isSetPubKey()) {
        this.pubKey = other.pubKey;
      }
    }

    public requestSEKey_args deepCopy() {
      return new requestSEKey_args(this);
    }


    public void clear() {
      this.masterKey = null;
      this.hid = null;
      this.pubKey = null;
    }

    public String getMasterKey() {
      return this.masterKey;
    }

    public requestSEKey_args setMasterKey(String masterKey) {
      this.masterKey = masterKey;
      return this;
    }

    public void unsetMasterKey() {
      this.masterKey = null;
    }

    /** Returns true if field masterKey is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterKey() {
      return this.masterKey != null;
    }

    public void setMasterKeyIsSet(boolean value) {
      if (!value) {
        this.masterKey = null;
      }
    }

    public String getHid() {
      return this.hid;
    }

    public requestSEKey_args setHid(String hid) {
      this.hid = hid;
      return this;
    }

    public void unsetHid() {
      this.hid = null;
    }

    /** Returns true if field hid is set (has been assigned a value) and false otherwise */
    public boolean isSetHid() {
      return this.hid != null;
    }

    public void setHidIsSet(boolean value) {
      if (!value) {
        this.hid = null;
      }
    }

    public String getPubKey() {
      return this.pubKey;
    }

    public requestSEKey_args setPubKey(String pubKey) {
      this.pubKey = pubKey;
      return this;
    }

    public void unsetPubKey() {
      this.pubKey = null;
    }

    /** Returns true if field pubKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPubKey() {
      return this.pubKey != null;
    }

    public void setPubKeyIsSet(boolean value) {
      if (!value) {
        this.pubKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MASTER_KEY:
        if (value == null) {
          unsetMasterKey();
        } else {
          setMasterKey((String)value);
        }
        break;

      case HID:
        if (value == null) {
          unsetHid();
        } else {
          setHid((String)value);
        }
        break;

      case PUB_KEY:
        if (value == null) {
          unsetPubKey();
        } else {
          setPubKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_KEY:
        return getMasterKey();

      case HID:
        return getHid();

      case PUB_KEY:
        return getPubKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MASTER_KEY:
        return isSetMasterKey();
      case HID:
        return isSetHid();
      case PUB_KEY:
        return isSetPubKey();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSEKey_args)
        return this.equals((requestSEKey_args)that);
      return false;
    }

    public boolean equals(requestSEKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterKey = true && this.isSetMasterKey();
      boolean that_present_masterKey = true && that.isSetMasterKey();
      if (this_present_masterKey || that_present_masterKey) {
        if (!(this_present_masterKey && that_present_masterKey))
          return false;
        if (!this.masterKey.equals(that.masterKey))
          return false;
      }

      boolean this_present_hid = true && this.isSetHid();
      boolean that_present_hid = true && that.isSetHid();
      if (this_present_hid || that_present_hid) {
        if (!(this_present_hid && that_present_hid))
          return false;
        if (!this.hid.equals(that.hid))
          return false;
      }

      boolean this_present_pubKey = true && this.isSetPubKey();
      boolean that_present_pubKey = true && that.isSetPubKey();
      if (this_present_pubKey || that_present_pubKey) {
        if (!(this_present_pubKey && that_present_pubKey))
          return false;
        if (!this.pubKey.equals(that.pubKey))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterKey()) ? 131071 : 524287);
      if (isSetMasterKey())
        hashCode = hashCode * 8191 + masterKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetHid()) ? 131071 : 524287);
      if (isSetHid())
        hashCode = hashCode * 8191 + hid.hashCode();

      hashCode = hashCode * 8191 + ((isSetPubKey()) ? 131071 : 524287);
      if (isSetPubKey())
        hashCode = hashCode * 8191 + pubKey.hashCode();

      return hashCode;
    }


    public int compareTo(requestSEKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMasterKey()).compareTo(other.isSetMasterKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterKey, other.masterKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHid()).compareTo(other.isSetHid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hid, other.hid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPubKey()).compareTo(other.isSetPubKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPubKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubKey, other.pubKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("requestSEKey_args(");
      boolean first = true;

      sb.append("masterKey:");
      if (this.masterKey == null) {
        sb.append("null");
      } else {
        sb.append(this.masterKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hid:");
      if (this.hid == null) {
        sb.append("null");
      } else {
        sb.append(this.hid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pubKey:");
      if (this.pubKey == null) {
        sb.append("null");
      } else {
        sb.append(this.pubKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSEKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestSEKey_argsStandardScheme getScheme() {
        return new requestSEKey_argsStandardScheme();
      }
    }

    private static class requestSEKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestSEKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSEKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterKey = iprot.readString();
                struct.setMasterKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hid = iprot.readString();
                struct.setHidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PUB_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pubKey = iprot.readString();
                struct.setPubKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSEKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterKey != null) {
          oprot.writeFieldBegin(MASTER_KEY_FIELD_DESC);
          oprot.writeString(struct.masterKey);
          oprot.writeFieldEnd();
        }
        if (struct.hid != null) {
          oprot.writeFieldBegin(HID_FIELD_DESC);
          oprot.writeString(struct.hid);
          oprot.writeFieldEnd();
        }
        if (struct.pubKey != null) {
          oprot.writeFieldBegin(PUB_KEY_FIELD_DESC);
          oprot.writeString(struct.pubKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSEKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestSEKey_argsTupleScheme getScheme() {
        return new requestSEKey_argsTupleScheme();
      }
    }

    private static class requestSEKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestSEKey_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, requestSEKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterKey()) {
          optionals.set(0);
        }
        if (struct.isSetHid()) {
          optionals.set(1);
        }
        if (struct.isSetPubKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMasterKey()) {
          oprot.writeString(struct.masterKey);
        }
        if (struct.isSetHid()) {
          oprot.writeString(struct.hid);
        }
        if (struct.isSetPubKey()) {
          oprot.writeString(struct.pubKey);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, requestSEKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.masterKey = iprot.readString();
          struct.setMasterKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hid = iprot.readString();
          struct.setHidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pubKey = iprot.readString();
          struct.setPubKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestSEKey_result implements org.apache.thrift.TBase<requestSEKey_result, requestSEKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestSEKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSEKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestSEKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestSEKey_resultTupleSchemeFactory();

    public SEKey success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SEKey.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSEKey_result.class, metaDataMap);
    }

    public requestSEKey_result() {
    }

    public requestSEKey_result(
      SEKey success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSEKey_result(requestSEKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new SEKey(other.success);
      }
    }

    public requestSEKey_result deepCopy() {
      return new requestSEKey_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public SEKey getSuccess() {
      return this.success;
    }

    public requestSEKey_result setSuccess(SEKey success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SEKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSEKey_result)
        return this.equals((requestSEKey_result)that);
      return false;
    }

    public boolean equals(requestSEKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(requestSEKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("requestSEKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSEKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestSEKey_resultStandardScheme getScheme() {
        return new requestSEKey_resultStandardScheme();
      }
    }

    private static class requestSEKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestSEKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSEKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SEKey();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSEKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSEKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestSEKey_resultTupleScheme getScheme() {
        return new requestSEKey_resultTupleScheme();
      }
    }

    private static class requestSEKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestSEKey_result> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSEKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSEKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SEKey();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
