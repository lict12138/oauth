/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tencent.tusi.sgx;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-15")
public class SEKey implements org.apache.thrift.TBase<SEKey, SEKey._Fields>, java.io.Serializable, Cloneable, Comparable<SEKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SEKey");

  private static final org.apache.thrift.protocol.TField ENCRYPTED_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UP_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("upSeed", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOWN_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("downSeed", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAC_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("macSeed", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SEKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SEKeyTupleSchemeFactory();

  public String encryptedKey; // required
  public String upSeed; // required
  public String downSeed; // required
  public String macSeed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENCRYPTED_KEY((short)1, "encryptedKey"),
    UP_SEED((short)2, "upSeed"),
    DOWN_SEED((short)3, "downSeed"),
    MAC_SEED((short)4, "macSeed");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENCRYPTED_KEY
          return ENCRYPTED_KEY;
        case 2: // UP_SEED
          return UP_SEED;
        case 3: // DOWN_SEED
          return DOWN_SEED;
        case 4: // MAC_SEED
          return MAC_SEED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENCRYPTED_KEY, new org.apache.thrift.meta_data.FieldMetaData("encryptedKey", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UP_SEED, new org.apache.thrift.meta_data.FieldMetaData("upSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_SEED, new org.apache.thrift.meta_data.FieldMetaData("downSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_SEED, new org.apache.thrift.meta_data.FieldMetaData("macSeed", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SEKey.class, metaDataMap);
  }

  public SEKey() {
  }

  public SEKey(
    String encryptedKey,
    String upSeed,
    String downSeed,
    String macSeed)
  {
    this();
    this.encryptedKey = encryptedKey;
    this.upSeed = upSeed;
    this.downSeed = downSeed;
    this.macSeed = macSeed;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SEKey(SEKey other) {
    if (other.isSetEncryptedKey()) {
      this.encryptedKey = other.encryptedKey;
    }
    if (other.isSetUpSeed()) {
      this.upSeed = other.upSeed;
    }
    if (other.isSetDownSeed()) {
      this.downSeed = other.downSeed;
    }
    if (other.isSetMacSeed()) {
      this.macSeed = other.macSeed;
    }
  }

  public SEKey deepCopy() {
    return new SEKey(this);
  }


  public void clear() {
    this.encryptedKey = null;
    this.upSeed = null;
    this.downSeed = null;
    this.macSeed = null;
  }

  public String getEncryptedKey() {
    return this.encryptedKey;
  }

  public SEKey setEncryptedKey(String encryptedKey) {
    this.encryptedKey = encryptedKey;
    return this;
  }

  public void unsetEncryptedKey() {
    this.encryptedKey = null;
  }

  /** Returns true if field encryptedKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptedKey() {
    return this.encryptedKey != null;
  }

  public void setEncryptedKeyIsSet(boolean value) {
    if (!value) {
      this.encryptedKey = null;
    }
  }

  public String getUpSeed() {
    return this.upSeed;
  }

  public SEKey setUpSeed(String upSeed) {
    this.upSeed = upSeed;
    return this;
  }

  public void unsetUpSeed() {
    this.upSeed = null;
  }

  /** Returns true if field upSeed is set (has been assigned a value) and false otherwise */
  public boolean isSetUpSeed() {
    return this.upSeed != null;
  }

  public void setUpSeedIsSet(boolean value) {
    if (!value) {
      this.upSeed = null;
    }
  }

  public String getDownSeed() {
    return this.downSeed;
  }

  public SEKey setDownSeed(String downSeed) {
    this.downSeed = downSeed;
    return this;
  }

  public void unsetDownSeed() {
    this.downSeed = null;
  }

  /** Returns true if field downSeed is set (has been assigned a value) and false otherwise */
  public boolean isSetDownSeed() {
    return this.downSeed != null;
  }

  public void setDownSeedIsSet(boolean value) {
    if (!value) {
      this.downSeed = null;
    }
  }

  public String getMacSeed() {
    return this.macSeed;
  }

  public SEKey setMacSeed(String macSeed) {
    this.macSeed = macSeed;
    return this;
  }

  public void unsetMacSeed() {
    this.macSeed = null;
  }

  /** Returns true if field macSeed is set (has been assigned a value) and false otherwise */
  public boolean isSetMacSeed() {
    return this.macSeed != null;
  }

  public void setMacSeedIsSet(boolean value) {
    if (!value) {
      this.macSeed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENCRYPTED_KEY:
      if (value == null) {
        unsetEncryptedKey();
      } else {
        setEncryptedKey((String)value);
      }
      break;

    case UP_SEED:
      if (value == null) {
        unsetUpSeed();
      } else {
        setUpSeed((String)value);
      }
      break;

    case DOWN_SEED:
      if (value == null) {
        unsetDownSeed();
      } else {
        setDownSeed((String)value);
      }
      break;

    case MAC_SEED:
      if (value == null) {
        unsetMacSeed();
      } else {
        setMacSeed((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENCRYPTED_KEY:
      return getEncryptedKey();

    case UP_SEED:
      return getUpSeed();

    case DOWN_SEED:
      return getDownSeed();

    case MAC_SEED:
      return getMacSeed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENCRYPTED_KEY:
      return isSetEncryptedKey();
    case UP_SEED:
      return isSetUpSeed();
    case DOWN_SEED:
      return isSetDownSeed();
    case MAC_SEED:
      return isSetMacSeed();
    }
    throw new IllegalStateException();
  }


  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SEKey)
      return this.equals((SEKey)that);
    return false;
  }

  public boolean equals(SEKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_encryptedKey = true && this.isSetEncryptedKey();
    boolean that_present_encryptedKey = true && that.isSetEncryptedKey();
    if (this_present_encryptedKey || that_present_encryptedKey) {
      if (!(this_present_encryptedKey && that_present_encryptedKey))
        return false;
      if (!this.encryptedKey.equals(that.encryptedKey))
        return false;
    }

    boolean this_present_upSeed = true && this.isSetUpSeed();
    boolean that_present_upSeed = true && that.isSetUpSeed();
    if (this_present_upSeed || that_present_upSeed) {
      if (!(this_present_upSeed && that_present_upSeed))
        return false;
      if (!this.upSeed.equals(that.upSeed))
        return false;
    }

    boolean this_present_downSeed = true && this.isSetDownSeed();
    boolean that_present_downSeed = true && that.isSetDownSeed();
    if (this_present_downSeed || that_present_downSeed) {
      if (!(this_present_downSeed && that_present_downSeed))
        return false;
      if (!this.downSeed.equals(that.downSeed))
        return false;
    }

    boolean this_present_macSeed = true && this.isSetMacSeed();
    boolean that_present_macSeed = true && that.isSetMacSeed();
    if (this_present_macSeed || that_present_macSeed) {
      if (!(this_present_macSeed && that_present_macSeed))
        return false;
      if (!this.macSeed.equals(that.macSeed))
        return false;
    }

    return true;
  }


  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEncryptedKey()) ? 131071 : 524287);
    if (isSetEncryptedKey())
      hashCode = hashCode * 8191 + encryptedKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpSeed()) ? 131071 : 524287);
    if (isSetUpSeed())
      hashCode = hashCode * 8191 + upSeed.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownSeed()) ? 131071 : 524287);
    if (isSetDownSeed())
      hashCode = hashCode * 8191 + downSeed.hashCode();

    hashCode = hashCode * 8191 + ((isSetMacSeed()) ? 131071 : 524287);
    if (isSetMacSeed())
      hashCode = hashCode * 8191 + macSeed.hashCode();

    return hashCode;
  }


  public int compareTo(SEKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEncryptedKey()).compareTo(other.isSetEncryptedKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptedKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedKey, other.encryptedKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpSeed()).compareTo(other.isSetUpSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upSeed, other.upSeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownSeed()).compareTo(other.isSetDownSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downSeed, other.downSeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacSeed()).compareTo(other.isSetMacSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macSeed, other.macSeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }


  public String toString() {
    StringBuilder sb = new StringBuilder("SEKey(");
    boolean first = true;

    sb.append("encryptedKey:");
    if (this.encryptedKey == null) {
      sb.append("null");
    } else {
      sb.append(this.encryptedKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("upSeed:");
    if (this.upSeed == null) {
      sb.append("null");
    } else {
      sb.append(this.upSeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downSeed:");
    if (this.downSeed == null) {
      sb.append("null");
    } else {
      sb.append(this.downSeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macSeed:");
    if (this.macSeed == null) {
      sb.append("null");
    } else {
      sb.append(this.macSeed);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SEKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SEKeyStandardScheme getScheme() {
      return new SEKeyStandardScheme();
    }
  }

  private static class SEKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<SEKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SEKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENCRYPTED_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encryptedKey = iprot.readString();
              struct.setEncryptedKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UP_SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.upSeed = iprot.readString();
              struct.setUpSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOWN_SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downSeed = iprot.readString();
              struct.setDownSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAC_SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macSeed = iprot.readString();
              struct.setMacSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SEKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.encryptedKey != null) {
        oprot.writeFieldBegin(ENCRYPTED_KEY_FIELD_DESC);
        oprot.writeString(struct.encryptedKey);
        oprot.writeFieldEnd();
      }
      if (struct.upSeed != null) {
        oprot.writeFieldBegin(UP_SEED_FIELD_DESC);
        oprot.writeString(struct.upSeed);
        oprot.writeFieldEnd();
      }
      if (struct.downSeed != null) {
        oprot.writeFieldBegin(DOWN_SEED_FIELD_DESC);
        oprot.writeString(struct.downSeed);
        oprot.writeFieldEnd();
      }
      if (struct.macSeed != null) {
        oprot.writeFieldBegin(MAC_SEED_FIELD_DESC);
        oprot.writeString(struct.macSeed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SEKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SEKeyTupleScheme getScheme() {
      return new SEKeyTupleScheme();
    }
  }

  private static class SEKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<SEKey> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, SEKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEncryptedKey()) {
        optionals.set(0);
      }
      if (struct.isSetUpSeed()) {
        optionals.set(1);
      }
      if (struct.isSetDownSeed()) {
        optionals.set(2);
      }
      if (struct.isSetMacSeed()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEncryptedKey()) {
        oprot.writeString(struct.encryptedKey);
      }
      if (struct.isSetUpSeed()) {
        oprot.writeString(struct.upSeed);
      }
      if (struct.isSetDownSeed()) {
        oprot.writeString(struct.downSeed);
      }
      if (struct.isSetMacSeed()) {
        oprot.writeString(struct.macSeed);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, SEKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.encryptedKey = iprot.readString();
        struct.setEncryptedKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.upSeed = iprot.readString();
        struct.setUpSeedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.downSeed = iprot.readString();
        struct.setDownSeedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.macSeed = iprot.readString();
        struct.setMacSeedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

